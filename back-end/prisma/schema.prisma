// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Sport {
  id            Int     @id @default(autoincrement())
  name          String
  slug          String  @unique
  logoUrl   	  String
  competitions  Competition[]
  apis          Api[]
  teams         Team[]
  @@map("sports")
}

model Api {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  sportId     Int
  sport       Sport     @relation(fields: [sportId], references: [id])
  host        String
  healthCheck String
  key         String
  secret      String?
  data        ApiData[]
  @@map("apis")
}

enum DataTypes {
  COMPETITION
  TEAM
  MATCH
  SEASON
  ROUND
}

model Data {
  id          Int           @id @default(autoincrement())
  type        DataTypes
  apis        ApiData[]
  competition Competition?  @relation()
  season      Season?       @relation()
  team        Team?         @relation()
  match       Match?        @relation()
  @@map("data")
}

model ApiData {
  id          Int       @id @default(autoincrement())
  api         Api       @relation(fields: [apiId], references: [id])
  apiId       Int       // relation scalar field (used in the `@relation` attribute above)
  data        Data      @relation(fields: [dataId], references: [id])
  dataId      Int       // relation scalar field (used in the `@relation` attribute above)
  idInApi     String
  createdAt   DateTime  @default(now())
  @@map("api_data")
}

model Country {
  id            Int     @id @default(autoincrement())
  name          String
  slug          String  @unique
  code          String?
  flagUrl       String?
  competitions  Competition[]
  teams         Team[]
  @@map("countries")
}

enum CompetitionStatus {
  AVAILABLE
  UNAVAILABLE
  OUT_OF_SEASON
  COMING_SOON
}

enum Gender {
  MEN
  WOMEN
}

model Competition {
  dataId    Int     @id
  data      Data    @relation(fields: [dataId], references: [id])
  sport     Sport   @relation(fields: [sportId], references: [id])
  sportId   Int     // relation scalar field (used in the `@relation` attribute above)
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int     // relation scalar field (used in the `@relation` attribute above)
  name      String
  slug      String  @unique
  logoUrl   String
  gender    Gender?
  status    CompetitionStatus
  seasons   Season[]
  @@map("competitions")
}

model Season {
  dataId        Int           @id
  data          Data          @relation(fields: [dataId], references: [id])
  competition   Competition   @relation(fields: [competitionId], references: [dataId])
  competitionId Int
  year          Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  teams         TeamSeason[]  @relation()
  rounds        Round[]       @relation()
  @@map("seasons")
}

model Team {
  dataId        Int           @id
  data          Data          @relation(fields: [dataId], references: [id])
  countryId     Int
  country       Country       @relation(fields: [countryId], references: [id])
  sportId       Int
  sport         Sport         @relation(fields: [sportId], references: [id])
  name          String
  slug          String
  shortName     String?
  code          String
  founded       Int?
  logoUrl       String?
  gender        Gender?
  seasons       TeamSeason[]  @relation()
  homeMatc      Match[]       @relation(name: "homeTeam")
  awayMatch     Match[]       @relation(name: "awayTeam")
  stats         Stat[]        @relation()
  @@map("teams")
}

model TeamSeason {
  id        Int     @id @default(autoincrement())
  teamId    Int
  team      Team    @relation(fields: [teamId], references: [dataId])
  seasonId  Int
  season    Season  @relation(fields: [seasonId], references: [dataId])
  @@map("team_seasons")
}

model Round {
  id        Int     @id @default(autoincrement())
  seasonId  Int
  season    Season  @relation(fields: [seasonId], references: [dataId])
  name      String?
  order     Int
  startDate DateTime?
  endDate   DateTime?
  matches   Match[] @relation()
  @@map("rounds")
}

model Match {
  dataId        Int     @id
  data          Data    @relation(fields: [dataId], references: [id])
  roundId       Int
  round         Round   @relation(fields: [roundId], references: [id])
  homeTeamId    Int
  homeTeam      Team    @relation(fields: [homeTeamId], references: [dataId], name: "homeTeam")
  awayTeamId    Int
  awayTeam      Team    @relation(fields: [awayTeamId], references: [dataId], name: "awayTeam")
  date          DateTime
  dateConfirmed Boolean
  stats         Stat[]  @relation()
  @@map("matches")
}

model StatType {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String
  stats Stat[]  @relation()
  @@map("stat_types")
}

enum StatPeriod {
  TOTAL
  FIRST
  SECOND
  EXTRA_TOTAL
  EXTRA_FIRST
  EXTRA_SECOND
  PENALTY
}
model Stat {
  id          Int       @id @default(autoincrement())
  matchId     Int
  match       Match     @relation(fields: [matchId], references: [dataId])
  teamId      Int
  team        Team      @relation(fields: [teamId], references: [dataId])
  statTypeId  Int
  statType    StatType  @relation(fields: [statTypeId], references: [id])
  period      StatPeriod
  value       Int
  @@map("stats")
}
